{
  "swagger": "2.0",
  "info": {
    "version": "0.1.0",
    "title": "Antus API ",
    "description": "Service de gestion de demande et d'offre de comparaison de taux de credits bancaire. <br/> L'API doc propose une documentation  pour les differentes routes de l'API.",
    "license": {
      "name": "MIT",
      "url": "http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT"
    },
    "termsOfService": "Please use this API in rights respects"
  },
  "host": "localhost:3000",
  "basePath": "/api/",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/docs/swagger/swagger.json": {
      "get": {
        "tags": [
          "API-DOC-Swagger"
        ],
        "description": "API Documentaion - Swagger",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Should return a swagger documentation",
            "schema": {
              "title": "OK",
              "description": "Should return a swagger definition ",
              "type": "Object"
            }
          },
          "404": {
            "description": "When ressource not found",
            "schema": {
              "title":"Not Found ",
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/demandes": {
      "get": {
        "tags": [
          "Demandes"
        ],
        "description": "Récupérer la liste des Demandes",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Must specified Authorization header (RFC 2616)",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "See ODATA URI Conventions for more details on filter capabilities http://www.odata.org/documentation/odata-version-2-0/uri-conventions",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Use to order the collection of Entries",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Should return a liste of elements event if it is empty",
            "schema": {
              "title": "OK",
              "description": "Should return a liste of elements that respect predicates",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Demande"
              }
            }
          },
          "206": {
            "description": "Should return a partial list of elements event if it is empty",
            "schema": {
              "title": "Demandes",
              "description": "Should return a liste of elements that respect predicates",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Demande"
              }
            }
          },
          "400": {
            "description": "When one of the parameter is malformed",
            "schema": {
              "title":"Bad Request",
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "When authenticated user have not enough rights to modify user's details",
            "schema": {
              "title":"Forbidden",
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "When a server error occurred",
            "schema": {
              "title":"Internal Server Error",
              "description": "Should specified error code and human readable explanation",
              "$ref": "#/definitions/Error"
            }
          },
          "501": {
            "description": "When this functionnality is not implemented",
            "schema": {
              "title":"Not Implemented",
              "description": "Should specified error code and human readable explanation",
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Demandes"
        ],
        "summary": "Add a new Demande ",
        "description": "Ajouter une demande ",
        "operationId": "addDemande",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Demande object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Demande"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Must specified Authorization header (RFC 2616)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Should return a created elements | Succces operation ",
            "schema": {
              "title": "OK",
              "description": "Should return a created elements ",
              "items": {
                "$ref": "#/definitions/Demande"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          },
          "400": {
            "description": "Invalid Order"
          },
          "403": {
            "description": "When authenticated user have not enough rights to modify user's details",
            "schema": {
              "title":"Forbidden",
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "When a server error occurred",
            "schema": {
              "title":"Internal Server Error",
              "description": "Should specified error code and human readable explanation",
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/demandes/{idDemande}": {
      "get": {
        "tags": [
          "Demandes"
        ],
        "description": "Récupérer une Demandes",
        "parameters": [
          {
            "name": "idDemande",
            "in": "path",
            "description": "Demande identifier",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Must specified Authorization header (RFC 2616)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Whend ressource exist",
            "schema": {
              "title": "OK",
              "$ref": "#/definitions/Demande"
            }
          },
          "400": {
            "description": "When one of the parameter is malformed.",
            "schema": {
              "title":"Bad Request",
              "description": "Should specified error code and human readable explanation",
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "When authenticated user have not enough rights to modify user's details",
            "schema": {
              "title":"Forbidden",
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "when ressource not found",
            "schema": {
              "title":"Not Found",
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "When a server error occurred",
            "schema": {
              "title":"Internal Server Error",
              "$ref": "#/definitions/Error"
            }
          },
          "501": {
            "description": "When this functionnality is not implemented",
            "schema": {
              "title":"Not Implemented",
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Demandes"
        ],
        "summary": "update a new Demande ",
        "description": "Modifier une demande ",
        "operationId": "updateDemande",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Demande object that needs to be udate",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Demande"
            }
          },
          {
            "name": "idDemande",
            "in": "path",
            "description": "Demande identifier",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Must specified Authorization header (RFC 2616)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Should return a created elements | Succces operation ",
            "schema": {
              "title": "OK",
              "description": "Should return a created elements ",
              "items": {
                "$ref": "#/definitions/Demande"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          },
          "400": {
            "description": "Invalid Order"
          },
          "403": {
            "description": "When authenticated user have not enough rights to modify user's details",
            "schema": {
              "title":"Forbidden",
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "When a server error occurred",
            "schema": {
              "title":"Internal Server Error",
              "description": "Should specified error code and human readable explanation",
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Demande": {
      "properties": {
        "prenomClient": {
          "description": "Demande Type",
          "type": "string"
        },
        "codePostal": {
          "description": "Demande Code",
          "type": "integer"
        }
      }
    },
    "Entity": {
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "Error": {
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "string"
        }
      }
    },
    "Succes": {
      "type": "string"
    }
  }
}
